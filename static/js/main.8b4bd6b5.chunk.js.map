{"version":3,"sources":["components/ImageCard.tsx","components/Choices.tsx","App.tsx","API/MarvelApi.ts","serviceWorker.ts","index.tsx"],"names":["ImageCard","props","className","style","backgroundImage","imgUrl","Choice","onChange","onSelectChoice","name","type","id","value","htmlFor","Choices","Object","keys","choices","map","key","App","useState","undefined","characterToGuess","setCharacterToGuess","characters","setCharacters","choiceState","didFind","setDidFind","useEffect","rndmKey","obj","length","Math","random","randomKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAyCeA,MAhBf,SAAmBC,GAGjB,OACE,6BACE,yBAAKC,UAAU,oBAAoBC,MAAO,CAACC,gBAAgB,OAAD,OAASH,EAAMI,OAAf,U,MC3BhE,SAASC,EAAOL,GACd,OACE,yBAAKC,UAAU,WACb,2BAAOK,SAAU,kBAAMN,EAAMO,eAAeP,EAAMQ,OAAOP,UAAU,QAAQQ,KAAK,QAAQD,KAAK,MAAME,GAAIV,EAAMQ,KAAMG,MAAOX,EAAMQ,OAChI,2BAAOP,UAAU,QAAQW,QAASZ,EAAMQ,MACtC,yBAAKP,UAAU,cACf,0BAAMA,UAAU,QAAQD,EAAMQ,QAoBvBK,MAdf,SAAiBb,GACf,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,cAEba,OAAOC,KAAKf,EAAMgB,SAASC,KAAI,SAAAC,GAC7B,OAAO,kBAACb,EAAD,CAAQG,KAAMU,EAAKA,IAAKA,EAAKX,eAAgBP,EAAMO,uBCmCrDY,MAlDf,WAAgB,IAAD,EACmCC,wBAAkDC,GADrF,mBACNC,EADM,KACYC,EADZ,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAIyBL,qBAJzB,mBAINM,EAJM,aAKiBN,sBALjB,mBAKNO,EALM,KAKGC,EALH,KAmCb,OA5BAC,qBAAU,WACRJ,ECbK,CACL,UAAa,mFACb,MAAS,mFACT,YAAa,mFACb,gBAAkB,mFAClB,KAAQ,uFDSP,IAOHI,qBAAU,WACR,GAAIL,EAAW,CACb,IAAMM,EAPM,SAASC,GACvB,IAAIhB,EAAOD,OAAOC,KAAKgB,GACvB,OAAOhB,EAAMA,EAAKiB,OAASC,KAAKC,UAAY,GAK1BC,CAAUX,GAC1BD,EAAoB,CAClBL,IAAKY,EACL1B,OAAQoB,EAAWM,QAGtB,CAACN,IAYF,yBAAKvB,UAAU,OACb,4BAAQA,UAAU,cAChB,4DAGa,IAAZ0B,GAAoB,yBAAK1B,UAAU,OAAf,oDACR,IAAZ0B,GAAqB,yBAAK1B,UAAU,QAAf,0CAEvBqB,GAAoB,kBAAC,EAAD,CAAWlB,OAAQkB,EAAiBlB,SACxDoB,GAAc,kBAAC,EAAD,CAASR,QAASQ,EAAYjB,eAnB5B,SAASW,IACR,OAAhBI,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBJ,OAAQA,EAC5BU,GAAW,GAGXA,GAAW,IAcgEF,YAAW,OAAEA,QAAF,IAAEA,IAAe,OEvCzFU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b4bd6b5.chunk.js","sourcesContent":["import React from 'react';\nimport './ImageCard.css';\n\n// const urlToCall = 'https://gateway.marvel.com/v1/public/characters?orderBy=modified&ts=1&apikey=9408dde31f0c9d6e41f9506fbb483c90&hash=1b84c5d3bf8dd03d589f7aad686c7ee4';\n\n// const useFetchImageUrl = () => {\n//   const [imageUrl, setData] = useState<string|undefined>(undefined);\n\n//   useEffect(\n//     () => {\n//       async function fetchData() {\n//         // const res = await fetch(urlToCall);\n//         // const resJson = await res.json();\n//         // const imageUrl = resJson.data.results[2].thumbnail.path;\n//         // const extension = resJson.data.results[2].thumbnail.extension;\n//         // setData(`${imageUrl}/standard_fantastic.${extension}`);\n//         setData('http://i.annihil.us/u/prod/marvel/i/mg/5/90/4c003c44095cb/standard_fantastic.png');\n//       }\n//       fetchData();\n//     }\n//   )\n\n//   return imageUrl;\n// }\n\nfunction ImageCard(props: {imgUrl: string}) {\n  // const imgUrl = useFetchImageUrl();\n\n  return (\n    <div>\n      <div className=\"ImageCard-Wrapper\" style={{backgroundImage: `url(${props.imgUrl})`}}>\n      {/* <div className=\"ImageCard-mask\"></div> */}\n        {/* <img\n        alt='ptite pic dla mif'\n        src={imgUrl}>\n        </img> */}\n      </div>\n    </div>\n  )\n}\n\nexport default ImageCard;","import React from 'react';\nimport './Choices.css';\n\nfunction Choice(props: { name: string, onSelectChoice: (key:string) => void }) {\n  return (\n    <div className=\"wrapper\">\n      <input onChange={() => props.onSelectChoice(props.name)} className=\"state\" type=\"radio\" name=\"app\" id={props.name} value={props.name} />\n      <label className=\"label\" htmlFor={props.name}>\n        <div className=\"indicator\"></div>\n        <span className=\"text\">{props.name}</span>\n      </label>\n    </div>\n  ) \n}\n\nfunction Choices(props: {choices: {[key: string]: string}, choiceState: string, onSelectChoice: (key:string) => void }){\n  return (\n    <div className=\"choicesWrapper\">\n      <div className=\"radiogroup\">\n        {\n        Object.keys(props.choices).map(key => {\n          return <Choice name={key} key={key} onSelectChoice={props.onSelectChoice}/>\n        })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Choices;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport ImageCard from './components/ImageCard';\nimport Choices from './components/Choices';\nimport { getCharacters } from './API/MarvelApi';\n\nfunction App() {\n  const [characterToGuess, setCharacterToGuess] = useState<{key: string, imgUrl: string}|undefined>(undefined);\n\n  const [characters, setCharacters] = useState<{[key: string]: string}>();\n  const [choiceState, setChoiceState] = useState<string>();\n  const [didFind, setDidFind] = useState<boolean>();\n\n  useEffect(() => {\n    setCharacters(getCharacters());\n  }, [])\n\n  var randomKey = function(obj: any): string {\n    var keys = Object.keys(obj);\n    return keys[ keys.length * Math.random() << 0];\n  }\n\n  useEffect(() => {\n    if (characters){\n      const rndmKey = randomKey(characters);\n      setCharacterToGuess({\n        key: rndmKey,\n        imgUrl: characters[rndmKey]\n      });\n    }\n  }, [characters])\n\n  const handleChoice = function(key: string) {\n    if (characterToGuess?.key === key) {\n      setDidFind(true);\n    }\n    else {\n      setDidFind(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          Guess the Marvel character\n        </div>\n        {didFind === true && <div className=\"win\"> Congratulations, you found the good character!</div>}\n        {didFind === false && <div className=\"lost\"> Nope, that's not the right character</div>}\n      </header>\n      {characterToGuess && <ImageCard imgUrl={characterToGuess.imgUrl} />}\n      {characters && <Choices choices={characters} onSelectChoice={handleChoice} choiceState={choiceState ?? \"\"}/>}\n    </div>\n  );\n}\n\nexport default App;\n","function getCharacters(): {[key: string]: string} {\n  return {\n    \"Chameleon\": \"http://i.annihil.us/u/prod/marvel/i/mg/7/00/4ce59f390463f/standard_fantastic.jpg\",\n    \"Cyber\": \"http://i.annihil.us/u/prod/marvel/i/mg/1/f0/4c0040521bc06/standard_fantastic.jpg\",\n    \"Omega Red\": \"http://i.annihil.us/u/prod/marvel/i/mg/5/d0/4c003d09267ae/standard_fantastic.jpg\",\n    \"Victor Mancha\" : \"http://i.annihil.us/u/prod/marvel/i/mg/b/10/4c0030f13bcaf/standard_fantastic.jpg\",\n    \"Ajak\": \"http://i.annihil.us/u/prod/marvel/i/mg/2/80/4c002f35c5215/standard_fantastic.jpg\"\n  }\n}\n\nexport { getCharacters };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}